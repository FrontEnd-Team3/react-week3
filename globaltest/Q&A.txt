1. FLUX 패턴에 대하여 설명해보세요
    FLUX 패턴은 사용자 인터페이스(UI)와 상태(state)를 관리하기 위한 애플리케이션 아키텍처 패턴이다. 
    FLUX 패턴은 상태 관리를 단순하고 예측 가능하게 만들어주며, 여러 컴포넌트 간의 상태 공유를 용이하게 한다
    FLUX 패턴은 단방향 데이터 흐름을 가지며, 세 가지 요소로 구성된다. 
    액션(Action), 디스패처(Dispatcher), 스토어(Store).

액션: 애플리케이션에서 발생하는 이벤트나 사용자의 입력을 나타냄 예를 들어, 버튼 클릭, 폼 제출 등이 액션에 해당함

디스패처: 액션을 받아서 스토어로 전달하는 역할, 디스패처는 액션의 케이스에 따라 스토어에게 어떤 업데이트를 해야하는지 전달한다

스토어: 애플리케이션의 상태를 저장하고, 변경되면 뷰에게 알려주는 역할을 하며 스토어는 상태를 변경하는 로직을 가지고 있고 변경된 상태를 뷰에게 전달하여 화면을 업데이트한다

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
    useReducer는 컴포넌트 내에서 로컬 상태 관리를 위해 사용한다.
    상태(state)와 상태를 변경하는 함수(dispatch)를 반환한다
    일반적으로 복잡한 상태 관리와 상태 갱신 로직이 필요한 경우에 주로 사용된다.

    (2) useContext
    useContext는 특정 컴포넌트의 하위 컴포넌트 안에서 전역적인 값을 공유하기 위해 사용된다.
    Context를 생성하고 값을 제공하는 Provider 컴포넌트를 설정한 뒤, 
    useContext를 사용하여 해당 값에 접근할 수 있다.
    다른 컴포넌트에서 전역적인 상태를 사용해야 할 때 주로 사용된다..

3. 전역 상태 관리를 해야하는 이유는 무엇일까요

    컴포넌트 간의 데이터 공유: 
    여러 컴포넌트에서 동일한 상태를 공유해야 할 때 전역 상태 관리는 중복된 코드를 방지하고 상태 업데이트를 일관되게 유지할 수 있다. 
    컴포넌트 간의 데이터 전달이 번거로워지는 상황에서 전역 상태를 사용하면 데이터 공유가 간편해진다.

    상태의 일관성 유지: 
    여러 컴포넌트에서 동일한 상태를 조작할 때 전역 상태 관리를 통해 상태의 일관성을 유지할 수 있다. 
    상태가 여러 컴포넌트에 분산되어 있으면 각 컴포넌트마다 상태를 동기화하는 작업이 필요하며, 
    이로 인해 버그 발생 가능성이 높아진다. 
    따라서 전역 상태 관리를 통해 상태의 변화를 중앙에서 관리하면 상태 갱신 로직을 더 효율적으로 관리할 수 있다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요

   장점:

   상태 관리의 편의성: 
   전역 상태 관리를 통해 상태를 중앙에서 관리하면 데이터 공유와 상태 업데이트가 간편해진다.

   컴포넌트 간 데이터 공유: 
   여러 컴포넌트에서 동일한 상태를 공유해야 할 때 중복 코드를 방지하고 일관된 데이터 공유를 할 수 있다.

   복잡한 상태 관리: 
   복잡한 상태 업데이트 로직이 필요한 경우 전역 상태 관리를 사용하면 코드를 더 깔끔하고 유지보수하기 쉽게 구성할 수 있다.
    
   단점:

   복잡성 추가: 
   전역 상태 관리를 사용하면 상태 업데이트 로직이 중앙에서 이루어지므로 애플리케이션의 구조가 복잡해질 수 있다.
   + 오버엔지니어링